<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:Button xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:mate="http://mate.asfusion.com/"
	xmlns:views="org.bigbluebutton.main.views.*"
	styleName="recordButtonStyleNormal"
	click="confirmChangeRecordingStatus()"
	height="24"
	enabled="false"
	creationComplete="onCreationComplete()"
	visible="true"
	includeInLayout="true"
	mouseOver="onRecordButtonMouseOver(event)"
	mouseOut="onRecordButtonMouseOut(event)" >

	<mate:Listener type="{BBBEvent.CHANGE_RECORDING_STATUS}" method="onRecordingStatusChanged" />
	<mate:Listener type="{FlashJoinedVoiceConferenceEvent.JOINED_VOICE_CONFERENCE}" method="handleFlashJoinedVoiceConference" />
	<mate:Listener type="{WebRTCCallEvent.WEBRTC_CALL_STARTED}" method="handleWebRTCCallStarted" />
	<mate:Listener type="{ChangeMyRole.CHANGE_MY_ROLE_EVENT}" method="refreshRole" />
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import flash.net.navigateToURL;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.core.managers.UserManager;
			import org.bigbluebutton.core.model.MeetingModel;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.model.LayoutOptions;
			import org.bigbluebutton.main.model.users.events.ChangeMyRole;
			import org.bigbluebutton.modules.phone.events.FlashJoinedVoiceConferenceEvent;
			import org.bigbluebutton.modules.phone.events.WebRTCCallEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private static const LOGGER:ILogger = getClassLogger(RecordButton);

			private var recordingFlag:Boolean;
			private var firstAudioJoin:Boolean = true;
			private var layoutOptions:LayoutOptions = null;
			private var _confirmationAlert:Alert = null;
			
			[Embed(source="/org/bigbluebutton/common/assets/images/record.png")]
			private var recordReminderIcon:Class;

			private function onCreationComplete():void {
				ResourceUtil.getInstance().addEventListener(Event.CHANGE, localeChanged); // Listen for locale changing
			}

			private function hideConfirmationAlert():void {
				if (_confirmationAlert != null) {
					if (_confirmationAlert.visible) {
						PopUpManager.removePopUp(_confirmationAlert);
					}
					_confirmationAlert = null;
				}
			}

			private function showConfirmationAlert():void {
				hideConfirmationAlert();

				var message:String = recordingFlag? ResourceUtil.getInstance().getString('bbb.mainToolbar.recordBtn.confirm.message.start'): ResourceUtil.getInstance().getString('bbb.mainToolbar.recordBtn.confirm.message.stop');

				// Confirm logout using built-in alert
				_confirmationAlert = Alert.show(message, ResourceUtil.getInstance().getString('bbb.mainToolbar.recordBtn.confirm.title'), Alert.YES | Alert.NO, this, onCloseConfirmationDialog, null, Alert.YES);

				var newX:Number = this.x;
				var newY:Number = this.y + this.height + 5;

				_confirmationAlert.validateNow();
				_confirmationAlert.move(newX, newY);
				//Accessibility.updateProperties();
			}

			private function confirmChangeRecordingStatus():void {
				LOGGER.debug("Confirming recording status change!!!!");

				// need to save the flag in case of any remote update on the recording status
				recordingFlag = !this.selected;

				showConfirmationAlert();
			}

			private function onCloseConfirmationDialog(e:CloseEvent):void {
				hideConfirmationAlert();
				// check to see if the YES button was pressed
				if (e.detail==Alert.YES) {
					 doChangeRecordingStatus();
				}
			}

			private function doChangeRecordingStatus():void {
				if (recordingFlag == this.selected) {
					// while the user was confirming the recording change, the 
					// button state changed to the desired one (another user started
					// or stopped to record), so we do nothing
					return;
				}

				var event:BBBEvent = new BBBEvent(BBBEvent.CHANGE_RECORDING_STATUS);
				event.payload.remote = false;
				event.payload.recording = recordingFlag;
				var d:Dispatcher = new Dispatcher();
				d.dispatchEvent(event);

				this.enabled = false;
				LOGGER.debug("RecordButton:doChangeRecordingStatus changing record status to {0}", [event.payload.recording]);
				
				if (!recordingFlag && getLayoutOptions().logoutOnStopRecording) {
					LOGGER.debug("Using 'logoutOnStopRecording' option to logout user after stopping recording");
					navigateToURL(new URLRequest(BBB.getLogoutURL()), "_self");
				}
			}

			private function updateButton(recording:Boolean):void {
				this.selected = recording;

				resourcesChanged();

				if (UserManager.getInstance().getConference().isRecord()) {
					this.enabled = UserManager.getInstance().getConference().amIModerator() && MeetingModel.getInstance().meeting.allowStartStopRecording;
				}

				if (! this.enabled) {
					hideConfirmationAlert();
				}
			}

			private function onRecordingStatusChanged(event:BBBEvent):void {
				if (event.payload.remote) {
					updateButton(event.payload.recording);

					LOGGER.debug("RecordButton:onRecordingStatusChanged changing record status to {0}", [event.payload.recording]);
				}
			}

			private function handleFlashJoinedVoiceConference(e:FlashJoinedVoiceConferenceEvent):void {
				showRecordingNotification();
			}
			
			private function handleWebRTCCallStarted(e:WebRTCCallEvent):void {
				showRecordingNotification();
			}
			
			private function showRecordingNotification():void {
				if (firstAudioJoin && this.visible && !this.selected 
						&& getLayoutOptions().showRecordingNotification
						&& UserManager.getInstance().getConference().amIModerator()
						&& MeetingModel.getInstance().meeting.allowStartStopRecording
						&& this.enabled) {
					var alert:Alert = Alert.show(ResourceUtil.getInstance().getString("bbb.mainToolbar.recordBtn..notification.message1") + "\n\n" + ResourceUtil.getInstance().getString("bbb.mainToolbar.recordBtn..notification.message2"), ResourceUtil.getInstance().getString("bbb.mainToolbar.recordBtn..notification.title"), Alert.OK, this);
					// we need to set transparency duration to avoid the blur effect when two alerts are displayed sequentially
					alert.setStyle("modalTransparencyDuration", 250);
					alert.titleIcon = recordReminderIcon;
					
					var newX:Number = this.x;
					var newY:Number = this.y + this.height + 5;
					
					alert.validateNow();
					alert.move(newX, newY);
					
					firstAudioJoin = false;
				}
			}
			
			private function getLayoutOptions() : LayoutOptions {
				if (layoutOptions == null) {
					layoutOptions = new LayoutOptions();
					layoutOptions.parseOptions();
				}
				return layoutOptions;
			}
			
			private function onRecordButtonMouseOver(event:MouseEvent):void {
				if (UserManager.getInstance().getConference().amIModerator() && UserManager.getInstance().getConference().isRecord()) {
					this.styleName = this.selected? "recordButtonStyleStop": "recordButtonStyleStart";
				}
			}

			private function onRecordButtonMouseOut(event:MouseEvent):void {
				if (UserManager.getInstance().getConference().amIModerator() && UserManager.getInstance().getConference().isRecord()) {
					this.styleName = this.selected? "recordButtonStyleStart": "recordButtonStyleNormal";
				}
			}

			private function updateToolTip():void {
				if (UserManager.getInstance().getConference().isRecord()) {
					if (UserManager.getInstance().getConference().amIModerator()) {
						if (MeetingModel.getInstance().meeting.allowStartStopRecording) {
							if (this.selected) {
								this.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.recordBtn.toolTip.stop');
							} else {
								this.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.recordBtn.toolTip.start');
							}
						} else {
							this.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.recordBtn.toolTip.wontInterrupt');
						}
					} else {
						if (this.selected) {
							this.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.recordBtn.toolTip.recording');
						} else {
							this.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.recordBtn.toolTip.onlyModerators');
						}
					}
				} else {
					if (UserManager.getInstance().getConference().amIModerator()) {
						if (MeetingModel.getInstance().meeting.isMetadata("wont-record-message")) {
							this.toolTip = MeetingModel.getInstance().meeting.metadata["wont-record-message"];
						} else {
							this.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.recordBtn.toolTip.wontRecord');
						}
					} else {
						this.toolTip = ResourceUtil.getInstance().getString('bbb.mainToolbar.recordBtn.toolTip.wontRecord');
					}
				}
			}

			override protected function resourcesChanged():void{
				super.resourcesChanged();

				this.styleName = this.selected? "recordButtonStyleStart": "recordButtonStyleNormal";

				updateToolTip();
			}

			private function localeChanged(e:Event):void{
				resourcesChanged();
			}

			private function refreshRole(e:ChangeMyRole):void {
				updateButton(this.selected);
			}
		]]>
	</mx:Script>
</mx:Button>
